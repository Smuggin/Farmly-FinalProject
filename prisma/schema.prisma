generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      Role      @default(CUSTOMER)
  addresses Address[]
  orders    Order[]
  reviews   Review[]
  store     Store?
}

model Store {
  id          Int       @id @default(autoincrement())
  name        String
  ownerId     Int       @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  addressId   Int?      @unique
  description String?
  images      File[]
  products    Product[]
  address     Address?  @relation(fields: [addressId], references: [id])
  owner       User      @relation(fields: [ownerId], references: [id])
}

model File {
  id          Int      @id @default(autoincrement())
  table       String
  recordId    Int?
  filename    String
  contentType String
  url         String
  createdAt   DateTime @default(now())
  productId   Int?
  storeId     Int?
  product     Product? @relation(fields: [productId], references: [id])
  store       Store?   @relation(fields: [storeId], references: [id])
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  price       Float
  description String?
  stock       Int         @default(0)
  categoryId  Int
  storeId     Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  images      File[]
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
  store       Store       @relation(fields: [storeId], references: [id])
  reviews     Review[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  status     OrderStatus @default(PENDING)
  addressId  Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  address    Address     @relation(fields: [addressId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  productId Int
  orderId   Int
  quantity  Int     @default(1)
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Address {
  id         Int     @id @default(autoincrement())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  userId     Int?
  user       User?   @relation(fields: [userId], references: [id])
  orders     Order[]
  store      Store?
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  CUSTOMER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
