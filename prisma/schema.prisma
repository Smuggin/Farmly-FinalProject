// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  phone       String?
  role        Role     @default(CUSTOMER)  
  addresses   Address[]
  orders      Order[]
  store       Store?
  reviews Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Store {
  id        Int       @id @default(autoincrement())
  name      String
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   Int       @unique  
  products  Product[]
  address   Address?  @relation(fields: [addressId], references: [id])
  addressId Int?      @unique 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  price       Float
  description String?
  image       String?
  stock       Int       @default(0)
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  store       Store     @relation(fields: [storeId], references: [id])
  storeId     Int
  orderItems  OrderItem[]
  reviews Review[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  products    Product[]
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  status      OrderStatus @default(PENDING)
  orderItems  OrderItem[]
  address     Address     @relation(fields: [addressId], references: [id])
  addressId   Int         
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     Int
  quantity    Int       @default(1)
  price       Float
}

model Address {
  id          Int      @id @default(autoincrement())
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  user        User?    @relation(fields: [userId], references: [id]) 
  userId      Int?  
  store       Store?   
  orders      Order[]   
}
model Review {
  id        Int      @id @default(autoincrement())
  rating    Int      // คะแนน 1-5
  comment   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
}
enum Role {
  CUSTOMER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}